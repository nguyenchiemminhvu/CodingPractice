https://leetcode.com/problems/max-number-of-k-sum-pairs/

class Solution 
{
public:
    int maxOperations(vector<int>& nums, int k) 
    {
        int count = 0;
        
        std::sort(nums.begin(), nums.end());
        
        int boundary = nums.size();
        for (int i = 0; i < nums.size() && i < boundary; i++)
        {
            int found = binary_search(nums, k - nums[i], boundary);
            if (found != -1)
            {
                if (found > i)
                {
                    boundary = found;
                
                    int count_left = 1;
                    int count_right = 1;

                    while (i + count_left < boundary && nums[i + count_left] == nums[i])
                    {
                        count_left++;
                    }
                    while (found + count_right < nums.size() && nums[found + count_right] == nums[found])
                    {
                        count_right++;
                    }

                    count += std::min(count_left, count_right);
                    i += count_left - 1;
                }
                else if (found == i)
                {
                    int count_right = 1;
                    while (i + count_right < nums.size() && nums[i + count_right] == nums[i])
                    {
                        count_right++;
                    }
                    count += (count_right / 2);
                    break;
                }
            }
        }
        
        return count;
    }
private:
    int binary_search(const std::vector<int>& nums, int val, int boundary)
    {
        auto it = std::lower_bound(nums.begin(), nums.begin() + boundary, val);
        if (it == nums.end() || *it != val)
            return -1;
        
        return std::distance(nums.begin(), it);
    }
};