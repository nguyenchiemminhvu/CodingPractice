class Solution 
{
public:
    int largestRectangleArea(vector<int>& heights) 
    {
        // int res = heights[0];
        // for (int i = 0; i < heights.size(); i++)
        // {
        //     int min_so_far = heights[i];
        //     for (int j = i + 1; j < heights.size(); j++)
        //     {
        //         min_so_far = std::min(min_so_far, heights[j]);
        //         res = std::max({ res, min_so_far * (j - i + 1), heights[j] });
        //     }
        // }
        // return res;
        
        std::stack<int> st;
        int max_all = 0;
        int cur_max = 0;
        int i = 0;
        while (i < heights.size())
        {
            if (st.empty() || heights[st.top()] <= heights[i])
            {
                st.push(i);
                i++;
            }
            else
            {
                int top_idx = st.top();
                st.pop();

                cur_max = heights[top_idx] * (st.empty() ? i : (i - st.top() - 1));
                max_all = std::max(max_all, cur_max);
            }
        }
        
        while (!st.empty())
        {
            int top_idx = st.top();
            st.pop();
            
            cur_max = heights[top_idx] * (st.empty() ? i : (i - st.top() - 1));
            max_all = std::max(max_all, cur_max);
        }
        
        return max_all;
    }
};