https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution 
{
public:
    Node* connect(Node* root) 
    {
        if (!root)
            return root;
        
        std::queue<Node*> Q;
        Q.push(root);
        
        int curLevel = 1;
        int nextLevel = 0;
        Node* prev = nullptr;
        
        while (!Q.empty())
        {
            Node* cur = Q.front();
            Q.pop();
            
            curLevel--;
            if (prev == nullptr)
            {
                prev = cur;
            }
            else
            {
                prev->next = cur;
                prev = cur;
            }
            
            if (cur->left)
            {
                Q.push(cur->left);
                nextLevel++;
            }
            
            if (cur->right)
            {
                Q.push(cur->right);
                nextLevel++;
            }
            
            if (curLevel == 0)
            {
                curLevel = nextLevel;
                nextLevel = 0;
                prev = nullptr;
            }
        }
        
        return root;
    }
};