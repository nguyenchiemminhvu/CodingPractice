https://leetcode.com/problems/maximum-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) 
    {
        return buildTreeUtil(nums, 0, nums.size() - 1);
    }
private:
    TreeNode* buildTreeUtil(const std::vector<int>& nums, int left, int right)
    {
        if (left > right)
            return nullptr;

        TreeNode* root = new TreeNode();

        int max_idx = left;
        int max_val = INT_MIN;
        for (int i = left; i <= right; i++)
        {
            if (max_val < nums[i])
            {
                max_val = nums[i];
                max_idx = i;
            }
        }

        root->val = nums[max_idx];
        root->left = buildTreeUtil(nums, left, max_idx - 1);
        root->right = buildTreeUtil(nums, max_idx + 1, right);
        return root;
    }
};