https://leetcode.com/problems/copy-list-with-random-pointer/

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution 
{
public:
    Node* copyRandomList(Node* head) 
    {
        if (!head)
            return nullptr;
        
        std::vector<std::pair<int, int>> input;
        std::vector<Node*> vl;
        
        // rebuild input
        Node* temp = head;
        while (temp)
        {
            int idx = searchList(head, temp->random);
            input.push_back({ temp->val, idx });
            vl.push_back(new Node(temp->val));
            if (vl.size() > 1)
            {
                vl[vl.size() - 2]->next = vl[vl.size() - 1];
            }
            temp = temp->next;
        }
        
        // build the connection of random pointers
        for (int i = 0; i < input.size(); i++)
        {
            if (input[i].second != -1)
            {
                vl[i]->random = vl[input[i].second];
            }
        }
        
        return vl[0];
    }
private:
    int searchList(Node* head, Node* target)
    {
        int idx = 0;
        while (head && target)
        {
            if (head == target)
                return idx;
            
            idx++;
            head = head->next;
        }
        
        return -1;
    }
};