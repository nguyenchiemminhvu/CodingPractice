https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) 
    {
        if (!root)
            return {};
        
        std::vector<std::vector<int>> res;
        std::vector<int> temp;
        
        std::queue<TreeNode*> Q;
        Q.push(root);
        int cur_level = 1;
        int next_level = 0;
        while (!Q.empty())
        {
            TreeNode* cur = Q.front();
            temp.push_back(cur->val);
            Q.pop();
            cur_level--;
            
            if (cur->left)
            {
                Q.push(cur->left);
                next_level++;
            }
            
            if (cur->right)
            {
                Q.push(cur->right);
                next_level++;
            }
            
            if (cur_level == 0)
            {
                res.push_back(temp);
                temp.clear();
                cur_level = next_level;
                next_level = 0;
            }
        }
        
        std::reverse(res.begin(), res.end());
        
        return res;
    }
};