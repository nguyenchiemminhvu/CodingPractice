https://leetcode.com/problems/super-ugly-number/

class Solution 
{
public:
    int nthSuperUglyNumber(int n, vector<int>& primes) 
    {
//         int x = 1;
//         while (n)
//         {
//             while (!isSupperUgly(x, primes))
//             {
//                 x++;
//             }
            
//             n--;
//             if (n == 0)
//                 return x;
            
//             x++;
//         }
        
//         return x;
        
        std::vector<int> nums;
        generating(primes, nums, n);
        return nums.back();
    }
private:
    void generating(const std::vector<int> primes, std::vector<int>& nums, int n)
    {
        nums.push_back(1);
        n--;
        
        std::vector<int> times(primes.size(), 0);
        std::vector<int> candidates(primes.begin(), primes.end());
        
        while (n)
        {
            int ic = 0;
            int candidate = candidates[0];
            for (int i = 1; i < candidates.size(); i++)
            {
                if (candidate > candidates[i])
                {
                    candidate = candidates[i];
                    ic = i;
                }
            }
            
            if (candidate > nums.back())
            {
                nums.push_back(candidate);
                n--;
                
                if (n == 0)
                    return;
            }
            
            times[ic]++;
            candidates[ic] = primes[ic] * nums[times[ic]];
        }
    }
    
    bool isSupperUgly(int n, const std::vector<int>& primes)
    {
        for (int i = primes.size() - 1; i >= 0; i--)
        {
            while (n % primes[i] == 0)
            {
                n /= primes[i];
            }
        }
        
        return n == 1;
    }
};