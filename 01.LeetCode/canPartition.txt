https://leetcode.com/problems/partition-equal-subset-sum/

class Solution 
{
public:
    bool canPartition(vector<int>& nums) 
    {
        int sum = 0;
        for (const int& n : nums)
        {
            sum += n;
        }
        
        if (sum & 1)
            return false;
        
        // return checkingBacktrack(nums, nums.size() - 1, sum / 2);
        return checkingDP(nums, sum / 2);
    }
private:
    bool checkingBacktrack(const std::vector<int>& nums, int i, int half_sum)
    {
        if (half_sum == 0)
            return true;
        
        if (half_sum < 0 || i < 0)
            return false;
        
        if (half_sum - nums[i] < 0)
            return checkingBacktrack(nums, i - 1, half_sum);
        
        return checkingBacktrack(nums, i - 1, half_sum - nums[i]) || checkingBacktrack(nums, i - 1, half_sum);
    }
    
    bool checkingDP(const std::vector<int>& nums, int half_sum)
    {
        std::vector<std::vector<bool>> dp(nums.size() + 1, std::vector<bool>(half_sum + 1, false));
        for (int i = 0; i <= nums.size(); i++)
        {
            dp[i][0] = true;
        }
        
        for (int i = 1; i <= nums.size(); i++)
        {
            for (int j = 1; j <= half_sum; j++)
            {
                if (j - nums[i - 1] < 0)
                {
                    dp[i][j] = dp[i - 1][j];
                }
                else
                {
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]];
                }
            }
        }
        
        return dp[nums.size() - 1][half_sum];
    }
};