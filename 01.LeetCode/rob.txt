https://leetcode.com/problems/house-robber/

class Solution 
{
public:
    int rob(vector<int>& nums) 
    {
        // return std::max(robbing(nums, 0, 0), robbing(nums, 1, 0));
        
        if (nums.size() == 1)
            return nums[0];
        
        std::vector<int> dp(nums.size(), 0);
        dp[0] = nums[0];
        dp[1] = std::max(nums[0], nums[1]);
        
        for (int i = 2; i < nums.size(); i++)
        {
            dp[i] = std::max(dp[i - 2] + nums[i], dp[i - 1]);
        }
        
        return dp.back();
    }
private:
    int robbing(const std::vector<int>& nums, int i, int res)
    {
        if (i >= nums.size())
            return res;
        
        return std::max(robbing(nums, i + 2, res + nums[i]), robbing(nums, i + 1, res));
    }
};