https://leetcode.com/problems/increasing-order-search-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    TreeNode* increasingBST(TreeNode* root) 
    {
        if (!root)
            return nullptr;
        if (!root->left && !root->right)
            return root;
        
        std::vector<TreeNode*> nodes;
        traversal(root, nodes);
        
        TreeNode* T = new TreeNode(nodes[0]->val);
        TreeNode* p = T;
        for (int i = 1; i < nodes.size(); i++)
        {
            p->right = new TreeNode(nodes[i]->val);
            p = p->right;
        }
        
        return T;
    }
private:
    void traversal(TreeNode*& root, std::vector<TreeNode*>& nodes)
    {
        if (!root)
            return;
        
        traversal(root->left, nodes);
        nodes.push_back(root);
        traversal(root->right, nodes);
    }
};