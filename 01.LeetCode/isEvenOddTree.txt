https://leetcode.com/problems/even-odd-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    bool isEvenOddTree(TreeNode* root) 
    {
        std::queue<TreeNode*> q;
        q.push(root);
        
        int cur_level = 1;
        int next_level = 0;
        
        int level = 0;
        std::vector<int> temp;
        
        while (!q.empty())
        {
            TreeNode* cur = q.front();
            q.pop();
            cur_level--;
            temp.push_back(cur->val);
            
            if (cur->left)
            {
                q.push(cur->left);
                next_level++;
            }
            
            if (cur->right)
            {
                q.push(cur->right);
                next_level++;
            }
            
            if (cur_level == 0)
            {
                cur_level = next_level;
                next_level = 0;
                
                if (level & 1)
                {
                    if (!checking_odd(temp))
                        return false;
                }
                else
                {
                    if (!checking_even(temp))
                        return false;
                }
                
                temp.clear();
                level++;
            }
        }
        
        return true;
    }
private:
    bool checking_odd(const std::vector<int>& temp)
    {
        if (temp.empty())
            return true;
        
        if (temp[0] & 1)
            return false;
        
        for (int i = 1; i < temp.size(); i++)
        {
            if (temp[i] & 1 || temp[i - 1] <= temp[i])
                return false;
        }
        
        return true;
    }
    
    bool checking_even(const std::vector<int>& temp)
    {
        if (temp.empty())
            return true;
        
        if (temp[0] % 2 == 0)
            return false;
        
        for (int i = 1; i < temp.size(); i++)
        {
            if (temp[i] % 2 == 0 || temp[i - 1] >= temp[i])
                return false;
        }
        
        return true;
    }
};