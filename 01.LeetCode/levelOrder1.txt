https://leetcode.com/problems/n-ary-tree-level-order-traversal/

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution 
{
public:
    vector<vector<int>> levelOrder(Node* root) 
    {
        if (!root)
            return {};
        
        std::vector<std::vector<int>> res;
        
        std::vector<int> temp;
        std::queue<Node*> Q;
        Q.push(root);
        
        int cur_level = 1;
        int next_level = 0;
        
        while (!Q.empty())
        {
            Node* cur = Q.front();
            Q.pop();
            cur_level--;
            
            temp.push_back(cur->val);
            
            for (Node* n : cur->children)
            {
                Q.push(n);
                next_level++;
            }
            
            if (cur_level == 0)
            {
                res.push_back(temp);
                temp.clear();
                
                cur_level = next_level;
                next_level = 0;
            }
        }
        
        return res;
    }
};