https://leetcode.com/problems/jump-game/

class Solution 
{
public:
    bool canJump(vector<int>& nums) 
    {
        if (nums.size() == 1)
            return true;
        
        if (nums[0] == 0)
            return false;
        
        // return trying(nums, 0);
        
        std::vector<bool> dp(nums.size(), false);
        dp[0] = (nums[0] > 0);
        
        for (int i = 0; i < nums.size() - 1; i++)
        {
            if (dp[i] && nums[i])
            {
                if (i + nums[i] >= nums.size())
                    return true;
                
                std::fill(dp.begin() + i, dp.begin() + i + nums[i] + 1, true);
            }
        }
        
        return dp.back();
    }
private:
    bool trying(const std::vector<int>& nums, int i)
    {
        if (i >= nums.size() - 1)
            return true;
        
        if (nums[i] == 0)
            return false;
        
        for (int j = nums[i] + i; j > i; j--)
        {
            if (trying(nums, j))
                return true;
        }
        
        return false;
    }
};