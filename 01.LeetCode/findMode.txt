https://leetcode.com/problems/find-mode-in-binary-search-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    vector<int> findMode(TreeNode* root) 
    {
        std::unordered_map<int, int> freq;
        makeFreq(root, freq);
        
        std::vector<int> res;
        int cur_freq = 0;
        for (auto& p : freq)
        {
            if (cur_freq < p.second)
            {
                cur_freq = p.second;
                res.clear();
                res.push_back(p.first);
            }
            else if (cur_freq == p.second)
            {
                res.push_back(p.first);
            }
        }
        return res;
    }
private:
    void makeFreq(TreeNode* root, std::unordered_map<int, int>& freq)
    {
        if (!root)
            return;
        
        makeFreq(root->left, freq);
        freq[root->val]++;
        makeFreq(root->right, freq);
    }
};