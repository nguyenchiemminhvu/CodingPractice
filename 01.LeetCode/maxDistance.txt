https://leetcode.com/problems/two-furthest-houses-with-different-colors/

class Solution 
{
public:
    int maxDistance(const vector<int>& colors)
    {
        // return diffUtil(colors, 0, colors.size() - 1);
        
        int max_diff = 0;
        for (int i = 0; i < colors.size(); i++)
        {
            for (int j = colors.size() - 1; j > i; j--)
            {
                if (colors[i] != colors[j])
                {
                    max_diff = std::max(max_diff, j - i);
                    break;
                }
            }
        }
        
        return max_diff;
    }
private:
    int diffUtil(const std::vector<int>& colors, int left, int right)
    {
        if (left >= right)
            return -1;
        
        if (colors[left] != colors[right])
            return std::abs(right - left);
        
        int diffLeft = diffUtil(colors, left, right - 1);
        int diffRight = diffUtil(colors, left + 1, right);
        
        return std::max(diffLeft, diffRight);
    }
};