https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class FindElements
{
public:
    FindElements(TreeNode* root)
    {
        int h = height(root);
        values.resize(pow(2, h) - 1);
        fillArray(root, 0, values);
        std::sort(values.begin(), values.end());
    }
    
    bool find(int target)
    {
        return std::binary_search(values.begin(), values.end(), target);
    }
private:
    int height(TreeNode* root)
    {
        if (root == nullptr)
            return 0;
        return 1 + std::max(height(root->left), height(root->right));
    }

    void fillArray(TreeNode* root, int idx, std::vector<int>& values)
    {
        if (root == nullptr)
            return;
        
        fillArray(root->left, idx * 2 + 1, values);
        values[idx] = idx;
        fillArray(root->right, idx * 2 + 2, values);
    }
private:
    std::vector<int> values;
};

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements* obj = new FindElements(root);
 * bool param_1 = obj->find(target);
 */