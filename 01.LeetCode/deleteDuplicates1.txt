https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    ListNode* deleteDuplicates(ListNode* head) 
    {
        if (!head || !head->next)
            return head;
        
        ListNode* slow = head;
        ListNode* fast = head->next;
        
        while (slow && fast && slow->val == fast->val)
        {
            while (slow && fast && slow->val == fast->val)
            {
                fast = fast->next;
            }
            
            slow = fast;
            head = slow;
            
            if (fast)
                fast = fast->next;
            else
                break;
        }
        
        while (true)
        {
            while (fast && fast->next && fast->next->val != fast->val)
            {
                fast = fast->next;
            }
            
            if (!fast || !fast->next)
                break;
            
            while (slow->next != fast)
            {
                slow = slow->next;
            }
            
            while (fast->next && fast->next->val == fast->val)
            {
                fast = fast->next;
            }
            
            slow->next = fast->next;
            fast = fast->next;
        }
        
        return head;
    }
};