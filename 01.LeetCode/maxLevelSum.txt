https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    int maxLevelSum(TreeNode* root) 
    {
        std::queue<TreeNode*> Q;
        Q.push(root);
        
        int cur_level = 1;
        int next_level = 0;
        int cur_row = 1;
        int max_row = 1;
        long long int cur_sum = 0;
        long long int max_sum = INT_MIN;
        
        while (!Q.empty())
        {
            TreeNode* cur = Q.front();
            Q.pop();
            cur_sum += cur->val;
            cur_level--;
            
            if (cur->left)
            {
                Q.push(cur->left);
                next_level++;
            }
            
            if (cur->right)
            {
                Q.push(cur->right);
                next_level++;
            }
            
            if (cur_level == 0)
            {
                cur_level = next_level;
                next_level = 0;
                
                if (max_sum < cur_sum)
                {
                    max_sum = cur_sum;
                    max_row = cur_row;
                }
                
                cur_row++;
                cur_sum = 0;
            }
        }
        
        return max_row;
    }
};