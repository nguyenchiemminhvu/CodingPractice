https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    int pseudoPalindromicPaths(TreeNode* root) 
    {
        int res = 0;
        std::vector<int> freq(10, 0);
        traversal(root, freq, res);
        return res;
    }
private:
    void traversal(TreeNode* root, std::vector<int>& freq, int& res)
    {
        if (!root)
            return;
        
        freq[root->val]++;
        if (!root->left && !root->right)
        {
            if (isPalindrome(freq))
            {
                res++;
            }
        }
        
        traversal(root->left, freq, res);
        traversal(root->right, freq, res);
        
        freq[root->val]--;
    }
    
    bool isPalindrome(const std::vector<int>& freq)
    {
        int count_odd = 0;
        for (int i = 1; i <= 9; i++)
        {
            count_odd += (freq[i] & 1);
        }
        return count_odd < 2;
    }
};