https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    int findSecondMinimumValue(TreeNode* root) 
    {
        if (!root->left && !root->right)
            return -1;
        
        int first_min = root->val;
        std::priority_queue<int, std::vector<int>, std::greater<int>> Q;
        secondMinUtil(root, first_min, Q);
        
        if (Q.empty())
            return -1;
        
        return Q.top();
    }
private:
    void secondMinUtil(TreeNode* root, int first_min, std::priority_queue<int, std::vector<int>, std::greater<int>>& Q)
    {
        if (!root)
            return;
        
        secondMinUtil(root->left, first_min, Q);
        
        if (root->val > first_min)
            Q.push(root->val);
        
        secondMinUtil(root->right, first_min, Q);
    }
};