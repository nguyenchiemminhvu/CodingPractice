https://leetcode.com/problems/reverse-nodes-in-even-length-groups/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    ListNode* reverseEvenLengthGroups(ListNode* head) 
    {
        if (!head || !head->next)
            return head;
        
        head->next = reverseList(head->next, 2);
        return head;
    }
private:
    ListNode* reverseList(ListNode* head, int n)
    {
        if (!head || !head->next)
            return head;
        
        ListNode* right = nullptr;
        int count = countList(head, n, right);
        if (count & 1)
        {
            ListNode* temp = head;
            while (count > 1)
            {
                temp = temp->next;
                count--;
            }
            temp->next = reverseList(right, n + 1);
            return head;
        }
        else
        {
            ListNode* prev = nullptr;
            ListNode* cur = head;
            ListNode* next = nullptr;
            ListNode* end = nullptr;
            
            while (count)
            {
                next = cur->next;
                cur->next = prev;
                prev = cur;
                if (!end)
                    end = prev;
                cur = next;
                
                count--;
            }
            
            end->next = reverseList(right, n + 1);
            
            return prev;
        }
    }
    
    int countList(ListNode* head, int n, ListNode*& right)
    {
        int count = 0;
        while (n && head)
        {
            count++;
            
            n--;
            head = head->next;
        }
        
        right = head;
        return count;
    }
};