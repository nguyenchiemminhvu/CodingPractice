https://leetcode.com/problems/01-matrix/

class Solution 
{
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) 
    {
        int dir_r[] = { 0, -1, 0, 1 };
        int dir_c[] = { -1, 0, 1, 0 };
        
        int m = mat.size();
        int n = mat[0].size();
        std::vector<std::vector<int>> dist(m, std::vector<int>(n, INT_MAX));
        std::queue<std::pair<int, int>> Q;
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (mat[i][j] == 0)
                {
                    dist[i][j] = 0;
                    Q.push({i, j});
                }
            }
        }
        
        while (!Q.empty())
        {
            std::pair<int, int> cur = Q.front();
            Q.pop();
            
            for (int i = 0; i < 4; i++)
            {
                int next_r = cur.first + dir_r[i];
                int next_c = cur.second + dir_c[i];
                
                if (isValid(m, n, next_r, next_c))
                {
                    if (1 + dist[cur.first][cur.second] < dist[next_r][next_c])
                    {
                        dist[next_r][next_c] = 1 + dist[cur.first][cur.second];
                        Q.push({next_r, next_c});
                    }
                }
            }
        }
        
        return dist;
    }
private:
    bool isValid(int m, int n, int r, int c)
    {
        return r >= 0 && r < m && c >= 0 && c < n;
    }
};