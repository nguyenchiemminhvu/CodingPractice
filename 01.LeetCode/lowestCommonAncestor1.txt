https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution 
{
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
        std::vector<TreeNode*> path_p;
        getPath(root, p->val, path_p);
        
        std::vector<TreeNode*> path_q;
        getPath(root, q->val, path_q);
        
        int i = 0;
        for (i = 0; i < path_p.size() && i < path_q.size(); i++)
        {
            if (path_p[i]->val != path_q[i]->val)
            {
                return path_p[i - 1];
            }
        }
        
        if (i <= path_p.size())
            return path_p[i - 1];
        
        return path_q[i - 1];
    }
private:
    bool getPath(TreeNode* root, int val, std::vector<TreeNode*>& path)
    {
        if (!root)
            return false;
        
        path.push_back(root);
        if (root->val == val)
            return true;
        
        if (getPath(root->left, val, path) || getPath(root->right, val, path))
            return true;
        
        path.pop_back();
        
        return false;
    }
};