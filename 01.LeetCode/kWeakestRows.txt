https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/

class Solution 
{
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) 
    {
        std::vector<std::pair<int, int>> factor;
        for (int i = 0; i < mat.size(); i++)
        {
            int count = 0;
            for (const int& val : mat[i])
            {
                if (val == 0)
                    break;
                count++;
            }
            
            factor.push_back( { i, count } );
        }
        
        std::sort
        (
            factor.begin(),
            factor.end(),
            [](const std::pair<int, int>& p1, const std::pair<int, int>& p2)
            {
                if (p1.second < p2.second)
                    return true;
                if (p1.second > p2.second)
                    return false;
                return p1.first < p2.first;
            }
        );
        
        std::vector<int> res;
        for (int i = 0; i < k; i++)
        {
            res.push_back(factor[i].first);
        }
        return res;
    }
};