https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    int maxAncestorDiff(TreeNode* root) 
    {
        std::vector<TreeNode*> parents;
        return maxDiffUtil(root, parents);
    }
private:
    int maxDiffUtil(TreeNode* root, std::vector<TreeNode*>& parents)
    {
        if (!root)
            return INT_MIN;
        
        int max = INT_MIN;
        for (int i = 0; i < parents.size(); i++)
        {
            max = std::max(max, std::abs(root->val - parents[i]->val));
        }

        parents.push_back(root);
        max = std::max(max, maxDiffUtil(root->left, parents));
        max = std::max(max, maxDiffUtil(root->right, parents));
        parents.pop_back();

        return max;
    }
};