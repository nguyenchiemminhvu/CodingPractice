https://leetcode.com/problems/number-of-longest-increasing-subsequence/

class Solution 
{
public:
    int findNumberOfLIS(vector<int>& nums) 
    {
        return longestDP(nums);
    }
private:
    int longestDP(const std::vector<int>& nums)
    {
        std::vector<int> dp(nums.size(), 1);
        std::vector<int> freq(nums.size(), 1);
        
        int max_dp = 1;
        int max_freq = 1;
        for (int i = 1; i < nums.size(); i++)
        {
            for (int j = 0; j < i; j++)
            {
                if (nums[j] < nums[i])
                {
                    if (dp[i] < 1 + dp[j])
                    {
                        dp[i] = 1 + dp[j];
                        freq[i] = freq[j];
                    }
                    else if (dp[i] == 1 + dp[j])
                    {
                        freq[i] += freq[j];
                    }
                }
            }
            
            if (max_dp < dp[i])
            {
                max_dp = dp[i];
                max_freq = freq[i];
            }
            else if (max_dp == dp[i])
            {
                max_freq += freq[i];
            }
        }
        
        return max_freq;
    }
};