https://leetcode.com/problems/interleaving-string/

class Solution 
{
public:
    bool isInterleave(const std::string& a, const std::string& b, const std::string& c) 
    {
        if (a.length() + b.length() != c.length())
            return false;
        
        // return interleaveBT(a, 0, b, 0, c, 0);
        return interleaveDP(a, b, c);
    }
private:
    bool interleaveBT(const std::string& a, int ia, const std::string& b, int ib, const std::string&c, int ic)
    {
        if (ia >= a.length() && ib >= b.length())
            return ic >= c.length();
        
        if (ia >= a.length())
        {
            if (b[ib] != c[ic])
                return false;
            
            return interleaveBT(a, ia, b, ib + 1, c, ic + 1);
        }
        else if (ib >= b.length())
        {
            if (a[ia] != c[ic])
                return false;
            
            return interleaveBT(a, ia + 1, b, ib, c, ic + 1);
        }
        else
        {
            bool temp = false;
            if (a[ia] == c[ic])
                temp |= interleaveBT(a, ia + 1, b, ib, c, ic + 1);
            if (b[ib] == c[ic])
                temp |= interleaveBT(a, ia, b, ib + 1, c, ic + 1);
            return temp;
        }
    }
    
    bool interleaveDP(const std::string& a, const std::string& b, const std::string& c)
    {
        std::vector<std::vector<bool>> dp(a.length() + 1, std::vector<bool>(b.length() + 1, false));
        dp[0][0] = true;
        
        for (int i = 1; i <= a.length(); i++)
        {
            if (a[i - 1] == c[i - 1])
            {
                dp[i][0] = dp[i - 1][0];
            }
        }
        
        for (int j = 1; j <= b.length(); j++)
        {
            if (b[j - 1] == c[j - 1])
            {
                dp[0][j] = dp[0][j - 1];
            }
        }
        
        for (int i = 1; i <= a.length(); i++)
        {
            for (int j = 1; j <= b.length(); j++)
            {
                char ca = a[i - 1];
                char cb = b[j - 1];
                char cc = c[i + j - 1];
                
                if (cc == ca)
                {
                    dp[i][j] = dp[i][j] | dp[i - 1][j]; 
                }
                
                if (cc == cb)
                {
                    dp[i][j] = dp[i][j] | dp[i][j - 1];
                }
            }
        }
        
        return dp[a.length()][b.length()];
    }
};