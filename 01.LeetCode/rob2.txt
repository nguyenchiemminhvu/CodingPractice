https://leetcode.com/problems/house-robber-iii/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    int rob(TreeNode* root) 
    {
        if (!root)
            return 0;
        
        std::unordered_map<TreeNode*, int> mem;
        return robbing(root, mem);
    }
private:
    int robbing(TreeNode* root, std::unordered_map<TreeNode*, int>& mem)
    {
        if (!root)
            return 0;
        
        if (mem.find(root) != mem.end())
            return mem[root];
        
        int R1 = root->val;
        if (root->left)
            R1 += robbing(root->left->left, mem) + robbing(root->left->right, mem);
        if (root->right)
            R1 += robbing(root->right->left, mem) + robbing(root->right->right, mem);
        
        int R2 = robbing(root->left, mem) + robbing(root->right, mem);
        
        mem[root] = std::max(R1, R2);
        return std::max(R1, R2);
    }
};