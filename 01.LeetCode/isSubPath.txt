https://leetcode.com/problems/linked-list-in-binary-tree/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    bool isSubPath(ListNode* head, TreeNode* root) 
    {
        std::vector<TreeNode*> sub_roots;
        findNode(root, head, sub_roots);
        if (sub_roots.empty())
            return false;
        
        for (TreeNode* sub_root : sub_roots)
        {
            if (checking(sub_root, head))
                return true;
        }
        
        return false;
    }
private:
    void findNode(TreeNode* root, ListNode* head, std::vector<TreeNode*>& res)
    {
        if (!root)
            return;
        
        findNode(root->left, head, res);
        if (root->val == head->val)
        {
            res.push_back(root);
        }
        findNode(root->right, head, res);
    }
    
    bool checking(TreeNode* sub_root, ListNode* head)
    {
        if (!head)
            return true;
        if (!sub_root && head)
            return false;
        if (sub_root->val != head->val)
            return false;
        
        return checking(sub_root->left, head->next) || checking(sub_root->right, head->next);
    }
};