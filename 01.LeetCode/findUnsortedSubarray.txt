https://leetcode.com/problems/shortest-unsorted-continuous-subarray/

class Solution 
{
public:
    int findUnsortedSubarray(vector<int>& nums) 
    {
        std::vector<int> sorted(nums.begin(), nums.end());
        std::sort(sorted.begin(), sorted.end());
        
        int left = -1;
        int right = -1;
        
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] != sorted[i])
            {
                left = i;
                break;
            }
        }
        
        for (int i = nums.size() - 1; i >= 0; i--)
        {
            if (nums[i] != sorted[i])
            {
                right = i;
                break;
            }
        }
        
        return left == -1 ? 0 : right - left + 1;
    }
};

class Solution 
{
public:
    int findUnsortedSubarray(vector<int>& nums) 
    {
        std::vector<std::pair<int, int>> unsorted_indices;
        
        for (int i = 1; i < nums.size(); i++)
        {
            if (nums[i] < nums[i - 1])
            {
                int left = i - 1;
                int pivot_left = left;
                int right = left + 1;
                while (right < nums.size() && nums[right] < nums[left])
                {
                    if (nums[right] < nums[pivot_left])
                    {
                        pivot_left = right;
                    }
                    
                    right++;
                }
                
                while (left >= 1 && nums[left - 1] > nums[pivot_left])
                {
                    left--;
                }
                
                unsorted_indices.push_back({left, right});
                i = right;
            }
        }
        
        if (unsorted_indices.empty())
            return 0;
        
        int res_left = INT_MAX;
        int res_right = INT_MIN;
        for (const std::pair<int, int>& p : unsorted_indices)
        {
            res_left = std::min(res_left, p.first);
            res_right = std::max(res_right, p.second);
        }
        
        return res_right - res_left;
    }
};