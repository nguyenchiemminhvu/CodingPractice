https://leetcode.com/problems/rotate-list/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    ListNode* rotateRight(ListNode* head, int k) 
    {
        if (!head)
            return nullptr;
        
        int count = countNodes(head);
        k %= count;
        if (k == 0)
            return head;
        
        int n = 1;
        ListNode* tail = head;
        while (n < count - k)
        {
            tail = tail->next;
            n++;
        }
        
        ListNode* newHead = tail->next;
        tail->next = nullptr;
        
        ListNode* temp = newHead;
        while(temp->next)
        {
            temp = temp->next;
        }
        temp->next = head;
        
        return newHead;
    }
private:
    int countNodes(ListNode* head)
    {
        int count = 0;
        while (head)
        {
            head = head->next;
            count++;
        }
        return count;
    }
};