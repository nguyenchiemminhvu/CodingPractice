https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) 
    {
        std::vector<std::vector<int>> res;
        if (root == nullptr)
            return res;

        traversal(root, res);
        for (int i = 1; i < res.size(); i += 2)
        {
            std::vector<int>& line = res[i];
            std::reverse(line.begin(), line.end());
        }
        return res;    
    }
private:
    void traversal(TreeNode* root, std::vector<std::vector<int>>& res)
    {
        std::queue<TreeNode*> Q;
        Q.push(root);

        int cur_level = 1;
        int next_level = 0;
        std::vector<int> line;

        while (!Q.empty())
        {
            TreeNode* cur = Q.front();
            Q.pop();
            cur_level--;

            line.push_back(cur->val);

            if (cur->left)
            {
                Q.push(cur->left);
                next_level++;
            }

            if (cur->right)
            {
                Q.push(cur->right);
                next_level++;
            }

            if (cur_level == 0)
            {
                res.push_back(line);
                line.clear();
                cur_level = next_level;
                next_level = 0;
            }
        }
    }
};