https://leetcode.com/problems/squares-of-a-sorted-array/

class Solution 
{
public:
    vector<int> sortedSquares(vector<int>& nums) 
    {
        int pivot = -1;
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] < 0)
                pivot++;
            
            nums[i] *= nums[i];
        }
        
        if (pivot == -1)
        {
            return nums;
        }
        
        if (pivot >= nums.size())
        {
            std::reverse(nums.begin(), nums.end());
            return nums;
        }
        
        std::vector<int> res;
        int left = pivot;
        int right = pivot + 1;
        
        while (left >= 0 && right < nums.size())
        {
            if (nums[left] < nums[right])
            {
                res.push_back(nums[left--]);
            }
            else
            {
                res.push_back(nums[right++]);
            }
        }
        
        while (left >= 0)
        {
            res.push_back(nums[left--]);
        }
        
        while (right < nums.size())
        {
            res.push_back(nums[right++]);
        }
        
        return res;
    }
};