https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    TreeNode* lcaDeepestLeaves(TreeNode* root) 
    {
        if (!root)
            return nullptr;
        
        std::vector<std::vector<TreeNode*>> paths;
        
        std::queue<std::vector<TreeNode*>> Q;
        Q.push({root});
        
        int max_depth = 0;
        
        while (!Q.empty())
        {
            std::vector<TreeNode*> cur = Q.front();
            Q.pop();
            
            if (cur.size() > max_depth)
            {
                max_depth = cur.size();
                
                paths.clear();
                paths.push_back(cur);
            }
            else if (cur.size() == max_depth)
            {
                paths.push_back(cur);
            }
            
            TreeNode* lastNode = cur.back();
            
            if (lastNode->left)
            {
                cur.push_back(lastNode->left);
                Q.push(cur);
                cur.pop_back();
            }
            
            if (lastNode->right)
            {
                cur.push_back(lastNode->right);
                Q.push(cur);
                cur.pop_back();
            }
        }
        
        if (paths.size() == 1)
        {
            return paths[0].back();
        }
        
        int len = paths[0].size() - 1;
        while (len >= 0)
        {
            bool checker = true;
            TreeNode* temp = paths[0][len];
            for (int i = 1; i < paths.size(); i++)
            {
                if (temp != paths[i][len])
                {
                    checker = false;
                    break;
                }
            }
            
            if (checker)
            {
                return temp;
            }
            
            len--;
        }
        
        return nullptr;
    }
};