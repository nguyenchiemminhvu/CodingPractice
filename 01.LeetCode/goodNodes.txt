https://leetcode.com/problems/count-good-nodes-in-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    int goodNodes(TreeNode* root) 
    {
        std::vector<int> path;
        return counting(root, path);
    }
private:
    int counting(TreeNode* root, std::vector<int>& path)
    {
        if (!root)
            return 0;
        
        int count = 0;
        
        if (isGoodNode(root->val, path))
            count++;
        
        path.push_back(root->val);
        
        count += counting(root->left, path);
        count += counting(root->right, path);
        
        path.pop_back();
        
        return count;
    }
    
    bool isGoodNode(int val, const std::vector<int>& path)
    {
        for (const int& n : path)
        {
            if (val < n)
                return false;
        }
        
        return true;
    }
};