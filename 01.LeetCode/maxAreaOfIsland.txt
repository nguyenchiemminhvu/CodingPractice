https://leetcode.com/problems/max-area-of-island/

class Solution 
{
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) 
    {
        int res = 0;
        
        int m = grid.size();
        int n = grid[0].size();
        int dir_r[] = { 0, -1, 0, 1 };
        int dir_c[] = { -1, 0, 1, 0 };
        
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (grid[i][j] == 1)
                {
                    res = std::max(res, BFS(grid, m, n, i, j, dir_r, dir_c));
                }
            }
        }
        
        return res;
    }
private:
    int BFS(std::vector<std::vector<int>>& grid, int m, int n, int r, int c, int* dir_r, int* dir_c)
    {
        int count = 0;
        
        std::queue<std::pair<int, int>> Q;
        Q.push({r, c});
        grid[r][c] = 0;
        
        while (!Q.empty())
        {
            std::pair<int, int> cur = Q.front();
            Q.pop();
            count++;
            
            for (int i = 0; i < 4; i++)
            {
                int next_r = cur.first + dir_r[i];
                int next_c = cur.second + dir_c[i];
                if (next_r >= 0 && next_r < m && next_c >= 0 && next_c < n 
                 && grid[next_r][next_c] == 1)
                {
                    grid[next_r][next_c] = 0;
                    Q.push({next_r, next_c});
                }
            }
        }
        
        return count;
    }
};