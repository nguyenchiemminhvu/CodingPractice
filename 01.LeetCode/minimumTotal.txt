https://leetcode.com/problems/triangle/

class Solution 
{
public:
    int minimumTotal(vector<vector<int>>& triangle) 
    {
        // return minUtil(triangle, 0, 0, 0);
        
        for (int i = 1; i < triangle.size(); i++)
        {
            triangle[i][0] += triangle[i - 1][0];
            triangle[i][triangle[i].size() - 1] += triangle[i - 1][triangle[i - 1].size() - 1];
        }
        
        for (int i = 1; i < triangle.size(); i++)
        {
            for (int j = 1; j < triangle[i].size() - 1; j++)
            {
                triangle[i][j] += std::min(triangle[i - 1][j], triangle[i - 1][j - 1]);
            }
        }
        
        int res = INT_MAX;
        for (const int& n : triangle[triangle.size() - 1])
            res = std::min(res, n);
        return res;
    }
private:
    int minUtil(std::vector<std::vector<int>>& tri, int r, int c, int val)
    {
        if (r >= tri.size())
            return val;
        
        return std::min(minUtil(tri, r + 1, c, val + tri[r][c]), minUtil(tri, r + 1, c + 1, val + tri[r][c]));
    }
};