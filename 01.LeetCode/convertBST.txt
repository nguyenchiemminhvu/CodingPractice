https://leetcode.com/problems/convert-bst-to-greater-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    TreeNode* convertBST(TreeNode* root) 
    {
        std::vector<int> vals;
        traversalUtil(root, vals);
        
        for (int i = vals.size() - 2; i >= 0; i--)
        {
            vals[i] += vals[i + 1];
        }
        
        int idx = 0;
        sumUtil(root, vals, idx);
        
        return root;
    }
private:
    void traversalUtil(TreeNode* root, std::vector<int>& vals)
    {
        if (!root)
            return;
        
        traversalUtil(root->left, vals);
        vals.push_back(root->val);
        traversalUtil(root->right, vals);
    }
    
    void sumUtil(TreeNode* root, const std::vector<int>& vals, int& i)
    {
        if (!root)
            return;
        
        sumUtil(root->left, vals, i);
        root->val = vals[i++];
        sumUtil(root->right, vals, i);
    }
};