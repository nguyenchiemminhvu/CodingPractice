https://leetcode.com/problems/house-robber-ii/

class Solution 
{
public:
    int rob(vector<int>& nums) 
    {
        if (nums.size() == 1)
            return nums[0];
        
        if (nums.size() == 2)
            return std::max(nums[0], nums[1]);
        
        // return std::max(robbing(nums, nums.size() - 1, 0, 0), robbing(nums, nums.size(), 1, 0));
        
        std::vector<int> dp1(nums.size(), 0);
        dp1[0] = nums[0];
        dp1[1] = std::max(nums[0], nums[1]);
        for (int i = 2; i < nums.size() - 1; i++)
        {
            dp1[i] = std::max(dp1[i - 2] + nums[i], dp1[i - 1]);
        }
        
        std::vector<int> dp2(nums.size(), 0);
        dp2[1] = nums[1];
        dp2[2] = std::max(nums[1], nums[2]);
        for (int i = 3; i < nums.size(); i++)
        {
            dp2[i] = std::max(dp2[i - 2] + nums[i], dp2[i - 1]);
        }
        
        return std::max(dp1[nums.size() - 2], dp2[nums.size() - 1]);
    }
private:
    int robbing(std::vector<int>& nums, int n, int i, int res)
    {
        if (i >= n)
        {
            return res;
        }
        
        return std::max(robbing(nums, n, i + 1, res), 
                        robbing(nums, n, i + 2, res + nums[i]));
    }
};