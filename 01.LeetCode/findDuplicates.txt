https://leetcode.com/problems/find-all-duplicates-in-an-array/

class Solution 
{
public:
    vector<int> findDuplicates(vector<int>& nums) 
    {
        // std::vector<int> res;  
        // std::unordered_map<int, bool> checker;
        // checker[nums[0]] = true;
        // for (int i = 1; i < nums.size(); i++)
        // {
        //     if (checker[nums[i]])
        //     {
        //         res.push_back(nums[i]);
        //     }
        //     else
        //     {
        //         checker[nums[i]] = true;
        //     }
        // }
        // return res;
        
        
        // std::vector<int> res;
        // std::sort(nums.begin(), nums.end());
        // for (int i = 1; i < nums.size(); i++)
        // {
        //     if (nums[i] == nums[i - 1])
        //         res.push_back(nums[i]);
        // }
        // return res;
        
        
        // std::unordered_set<int> res;
        // for (int i = 0; i < nums.size(); i++)
        // {
        //     while (nums[nums[i] - 1] != nums[i])
        //     {
        //         std::swap(nums[i], nums[nums[i] - 1]);
        //     }
        //
        //     if (nums[i] - 1 == i)
        //     {
        //         continue;
        //     }
        //     else
        //     {
        //         res.insert(nums[i]);
        //     }
        // }
        // return {res.begin(), res.end()};
        
        
        std::vector<int> res;
        int n = nums.size();
        for (int i = 0; i < n; i++)
        {
            nums[(nums[i] - 1) % n] = nums[(nums[i] - 1) % n] + n;
        }
        
        for (int i = 0; i < n; i++)
        {
            if (nums[i] > n + n)
            {
                res.push_back(i + 1);
            }
        }
        
        return res;
    }
};