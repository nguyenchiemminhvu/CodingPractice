https://leetcode.com/problems/palindrome-linked-list/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    bool isPalindrome(ListNode* head) 
    {
        if (!head)
            return false;
        if (!head->next)
            return true;
        if (!head->next->next)
            return head->val == head->next->val;
        
        ListNode* L1 = nullptr;
        ListNode* L2 = nullptr;
        splitLinkedList(head, L1, L2);
        L1 = reverseLinkedList(L1);
        
        while (L1 && L2)
        {
            if (L1->val != L2->val)
                return false;
            L1 = L1->next;
            L2 = L2->next;
        }
        
        return true;
    }
private:
    void splitLinkedList(ListNode* head, ListNode*& L1, ListNode*& L2)
    {
        L1 = head;
        
        ListNode* prev = nullptr;
        ListNode* slow = head;
        ListNode* fast = head->next;
        
        while (fast && fast->next)
        {
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        
        if (!fast)
        {
            L2 = slow->next;
            prev->next = nullptr;
        }
        else // fast->next is nullptr
        {
            L2 = slow->next;
            slow->next = nullptr;
        }
    }
    
    ListNode* reverseLinkedList(ListNode* L)
    {
        ListNode* prev = nullptr;
        ListNode* cur = L;
        ListNode* next = nullptr;
        
        while (cur)
        {
            next = cur->next;
            cur->next = prev;
            prev = cur;
            cur = next;
        }
        
        return prev;
    }
};