https://leetcode.com/problems/balance-a-binary-search-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    TreeNode* balanceBST(TreeNode* root) 
    {
        std::vector<TreeNode*> nodes;
        traversal(root, nodes);
        
        return buildTree(nodes);
    }
private:
    void traversal(TreeNode* root, std::vector<TreeNode*>& nodes)
    {
        if (!root)
            return;
        
        traversal(root->left, nodes);
        nodes.push_back(root);
        traversal(root->right, nodes);
    }
    
    TreeNode* buildTree(const std::vector<TreeNode*>& nodes)
    {
        return buildTreeUtil(nodes, 0, nodes.size() - 1);
    }
    
    TreeNode* buildTreeUtil(const std::vector<TreeNode*>& nodes, int left, int right)
    {
        if (left > right)
            return nullptr;
        
        int mid = (left + right) / 2;
        
        TreeNode* root = nodes[mid];
        root->left = buildTreeUtil(nodes, left, mid - 1);
        root->right = buildTreeUtil(nodes, mid + 1, right);
        return root;
    }
    
    int height(TreeNode* root)
    {
        if (!root)
            return 0;
        
        return 1 + std::max(height(root->left), height(root->right));
    }
};