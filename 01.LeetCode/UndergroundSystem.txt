https://leetcode.com/problems/design-underground-system/

class UndergroundSystem
{
public:
    UndergroundSystem()
    {
        
    }
    
    void checkIn(int id, const string& stationName, int t)
    {
        in_map[id] = {stationName, t};
    }
    
    void checkOut(int id, const string& stationName, int t)
    {
        std::pair<std::string, int>& in_info = in_map[id];
        res_map[{in_info.first, stationName}].first += (t - in_info.second);
        res_map[{in_info.first, stationName}].second++;
        in_map.erase(id);
    }
    
    double getAverageTime(const string& startStation, const string& endStation)
    {
        return (double)res_map[{startStation, endStation}].first / res_map[{startStation, endStation}].second;
    }
private:
    std::unordered_map<int, std::pair<std::string, int>> in_map;
    std::map<std::array<std::string, 2>, std::pair<int, int>> res_map;
};

/**
 * Your UndergroundSystem object will be instantiated and called as such:
 * UndergroundSystem* obj = new UndergroundSystem();
 * obj->checkIn(id,stationName,t);
 * obj->checkOut(id,stationName,t);
 * double param_3 = obj->getAverageTime(startStation,endStation);
 */