/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    TreeNode* deleteNode(TreeNode* root, int key) 
    {
        if (!root)
            return NULL;
        
        if (key < root->val)
        {
            root->left = deleteNode(root->left, key);
        }
        else if (key > root->val)
        {
            root->right = deleteNode(root->right, key);
        }
        else
        {
            if (!root->left && !root->right)
                return NULL;
            
            TreeNode* maxNode = findMax(root->left);
            if (maxNode)
            {
                root->val = maxNode->val;
                root->left = deleteNode(root->left, maxNode->val);
                return root;
            }
            
            TreeNode* minNode = findMin(root->right);
            if (minNode)
            {
                root->val = minNode->val;
                root->right = deleteNode(root->right, minNode->val);
                return root;
            }
        }
        
        return root;
    }
private:
    TreeNode* findMax(TreeNode* root)
    {
        while (root && root->right)
        {
            root = root->right;
        }
        return root;
    }
    
    TreeNode* findMin(TreeNode* root)
    {
        while (root && root->left)
        {
            root = root->left;
        }
        return root;
    }
};