https://leetcode.com/problems/cousins-in-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    bool isCousins(TreeNode* root, int x, int y) 
    {        
        std::vector<TreeNode*> path_x;
        std::vector<TreeNode*> path_y;
        
        getPath(root, x, path_x);
        getPath(root, y, path_y);
        
        if (path_x.size() != path_y.size())
            return false;
        
        if (path_x[path_x.size() - 2] == path_y[path_y.size() - 2])
            return false;
        
        return true;
    }
private:
    void getPath(TreeNode* root, int val, std::vector<TreeNode*>& path)
    {
        std::queue<std::vector<TreeNode*>> Q;
        Q.push({root});
        
        while (!Q.empty())
        {
            std::vector<TreeNode*> cur = Q.front();
            Q.pop();
            
            if (cur.back()->val == val)
            {
                path = cur;
                return;
            }
            
            if (cur.back()->left)
            {
                cur.push_back(cur.back()->left);
                Q.push(cur);
                cur.pop_back();
            }
            
            if (cur.back()->right)
            {
                cur.push_back(cur.back()->right);
                Q.push(cur);
                //cur.pop_back();
            }
        }
    }
};