https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) 
    {
        std::vector<std::vector<int>> nodes;
        traversal(root, 0, 0, nodes);
        
        std::sort
        (
            nodes.begin(),
            nodes.end(),
            [](const std::vector<int>& a, const std::vector<int>& b)
            {
                if (a[1] > b[1])
                    return false;
                
                if (a[1] < b[1])
                    return true;
                
                if (a[2] > b[2])
                    return false;
                
                if (a[2] < b[2])
                    return true;
                
                if (a[0] < b[0])
                    return true;
                
                return false;
            }
        );
        
        std::vector<std::vector<int>> res;
        
        nodes.push_back({INT_MAX, INT_MAX});
        int cur_x = nodes[0][1];
        std::vector<int> temp;
        for (int i = 0; i < nodes.size(); i++)
        {
            if (nodes[i][1] == cur_x)
            {
                temp.push_back(nodes[i][0]);
            }
            else
            {
                res.push_back(temp);
                temp.clear();
                cur_x = nodes[i][1];
                
                temp.push_back(nodes[i][0]);
            }
        }
        
        return res;
    }
private:
    void traversal(TreeNode* root, int x, int y, std::vector<std::vector<int>>& nodes)
    {
        if (!root)
            return;
        
        traversal(root->left, x - 1, y + 1, nodes);
        nodes.push_back({root->val, x, y});
        traversal(root->right, x + 1, y + 1, nodes);
    }
};