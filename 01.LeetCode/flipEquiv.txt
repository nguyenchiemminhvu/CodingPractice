https://leetcode.com/problems/flip-equivalent-binary-trees/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    bool flipEquiv(TreeNode* a, TreeNode* b) 
    {
        return checking(a, b);
    }
private:
    bool checking(TreeNode* a, TreeNode* b)
    {
        if (!a && !b)
            return true;
        
        if (!a && b)
            return false;
        if (a && !b)
            return false;
        
        if (a->val != b->val)
            return false;
        
        return (checking(a->left, b->right) && checking(a->right, b->left))
            || (checking(a->left, b->left) && checking(a->right, b->right));
    }
};