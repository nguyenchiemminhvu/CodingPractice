https://leetcode.com/problems/all-elements-in-two-binary-search-trees/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) 
    {
        std::vector<int> a;
        std::vector<int> b;
        
        traversal(root1, a);
        traversal(root2, b);
        
        std::vector<int> res;
        int ia = 0, ib = 0;
        while (ia < a.size() && ib < b.size())
        {
            if (a[ia] < b[ib])
            {
                res.push_back(a[ia]);
                ia++;
            }
            else
            {
                res.push_back(b[ib]);
                ib++;
            }
        }
        
        while (ia < a.size())
        {
            res.push_back(a[ia]);
            ia++;
        }
        
        while (ib < b.size())
        {
            res.push_back(b[ib]);
            ib++;
        }
        
        return res;
    }
private:
    void traversal(TreeNode* root, std::vector<int>& v)
    {
        if (!root)
            return;
        
        traversal(root->left, v);
        v.push_back(root->val);
        traversal(root->right, v);
    }
};