https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/

class Solution 
{
public:
    int maxProfit(vector<int>& prices) 
    {
        // return maxProfitBacktrack(prices, prices.size() - 1);
        return maxProfitDP(prices);
    }
private:
    int maxProfitBacktrack(const std::vector<int>& prices, int i)
    {
        if (i < 0)
            return 0;
        
        int total_profit = 0;
        for (int j = 0; j < i; j++)
        {
            total_profit = std::max({ 
                    total_profit, 
                    (prices[i] - prices[j]) + maxProfitBacktrack(prices, j - 2), 
                    maxProfitBacktrack(prices, i - 1)
            });
        }
        return total_profit;
    }
    
    int maxProfitDP(const std::vector<int>& prices)
    {
        if (prices.size() <= 1)
            return 0;
        
        std::vector<int> dp(prices.size(), 0);
        dp[1] = std::max(0, prices[1] - prices[0]);
        
        for (int i = 2; i < prices.size(); i++)
        {
            for (int j = 0; j < i; j++)
            {
                int candidate = (prices[i] - prices[j]);
                if (j > 1)
                {
                    candidate += dp[j - 2];
                }
                dp[i] = std::max({dp[i], dp[i - 1], candidate});
            }
        }
        
        return dp.back();
    }
};