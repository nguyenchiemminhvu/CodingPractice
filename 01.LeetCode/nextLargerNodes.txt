https://leetcode.com/problems/next-greater-node-in-linked-list/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    vector<int> nextLargerNodes(ListNode* head) 
    {
        std::vector<int> temp;
        while (head)
        {
            temp.push_back(head->val);
            head = head->next;
        }
        
        std::vector<int> res(temp.size(), 0);
        std::stack<int> st;
        for (int i = temp.size() - 1; i >= 0; i--)
        {
            if (st.empty())
            {
                st.push(temp[i]);
            }
            else
            {
                if (temp[i] < st.top())
                {
                    res[i] = st.top();
                    st.push(temp[i]);
                }
                else
                {
                    while (!st.empty() && st.top() <= temp[i])
                    {
                        st.pop();
                    }
                    
                    if (!st.empty())
                    {
                        res[i] = st.top();
                    }
                    
                    st.push(temp[i]);
                }
            }
        }
        
        return res;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    vector<int> nextLargerNodes(ListNode* head) 
    {
        int count = 0;
        head = reverseList(head, count);
        
        int ir = 0;
        std::vector<int> res(count, 0);
        std::stack<int> st;
        while (head)
        {
            if (st.empty())
            {
                st.push(head->val);
            }
            else
            {
                if (head->val < st.top())
                {
                    res[ir] = st.top();
                    st.push(head->val);
                }
                else
                {
                    while (!st.empty() && st.top() <= head->val)
                    {
                        st.pop();
                    }
                    
                    if (!st.empty())
                    {
                        res[ir] = st.top();
                    }
                    
                    st.push(head->val);
                }
            }
            
            ir++;
            head = head->next;
        }
        
        std::reverse(res.begin(), res.end());
        return res;
    }
private:
    ListNode* reverseList(ListNode* head, int& count)
    {
        int c = 0;
        
        ListNode* prev = nullptr;
        ListNode* cur = head;
        ListNode* next = nullptr;
        
        while (cur)
        {
            next = cur->next;
            cur->next = prev;
            prev = cur;
            cur = next;
            
            c++;
        }
        
        count = c;
        return prev;
    }
};