https://leetcode.com/problems/fizz-buzz-multithreaded/

class FizzBuzz 
{
private:
    int n;
    int cur;
    
    pthread_mutex_t mut;
    pthread_cond_t cond;

public:
    FizzBuzz(int n) 
    {
        this->n = n;
        cur = 1;
        
        pthread_mutex_init(&mut, NULL);
        pthread_cond_init(&cond, NULL);
    }

    // printFizz() outputs "fizz".
    void fizz(function<void()> printFizz) 
    {
        while (cur <= n)
        {
            pthread_mutex_lock(&mut);
            while (cur <= n && cur % 3 != 0 || cur % 15 == 0)
            {
                pthread_cond_wait(&cond, &mut);
            }
            
            if (cur > n)
                break;
            
            printFizz();
            cur++;
            
            pthread_cond_broadcast(&cond);
            pthread_mutex_unlock(&mut);
        }
        
        pthread_mutex_unlock(&mut);
        pthread_cond_broadcast(&cond);
    }

    // printBuzz() outputs "buzz".
    void buzz(function<void()> printBuzz) 
    {
        while (cur <= n)
        {
            pthread_mutex_lock(&mut);
            while (cur <= n && cur % 5 != 0 || cur % 15 == 0)
            {
                pthread_cond_wait(&cond, &mut);
            }
            
            if (cur > n)
                break;
            
            printBuzz();
            cur++;
            
            pthread_cond_broadcast(&cond);
            pthread_mutex_unlock(&mut);
        }
        
        pthread_mutex_unlock(&mut);
        pthread_cond_broadcast(&cond);
    }

    // printFizzBuzz() outputs "fizzbuzz".
	void fizzbuzz(function<void()> printFizzBuzz) 
    {
        while (cur <= n)
        {
            pthread_mutex_lock(&mut);
            while (cur <= n && cur % 15 != 0)
            {
                pthread_cond_wait(&cond, &mut);
            }
            
            if (cur > n)
                break;
            
            printFizzBuzz();
            cur++;
            
            pthread_cond_broadcast(&cond);
            pthread_mutex_unlock(&mut);
        }
        
        pthread_mutex_unlock(&mut);
        pthread_cond_broadcast(&cond);
    }

    // printNumber(x) outputs "x", where x is an integer.
    void number(function<void(int)> printNumber) 
    {
        while (cur <= n)
        {
            pthread_mutex_lock(&mut);
            while (cur <= n && cur % 3 == 0 || cur % 5 == 0)
            {
                pthread_cond_wait(&cond, &mut);
            }
            
            if (cur > n)
                break;
            
            printNumber(cur);
            cur++;
            
            pthread_cond_broadcast(&cond);
            pthread_mutex_unlock(&mut);
        }
        
        pthread_mutex_unlock(&mut);
        pthread_cond_broadcast(&cond);
    }
};