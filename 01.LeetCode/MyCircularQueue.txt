https://leetcode.com/problems/design-circular-queue/

class MyCircularQueue 
{
public:
    MyCircularQueue(int k) 
    {
        cap = k;
    }
    
    bool enQueue(int value) 
    {
        if (isFull())
            return false;
        
        L.push_back(value);
        return true;
    }
    
    bool deQueue() 
    {
        if (L.empty())
            return false;
        
        L.pop_front();
        return true;
    }
    
    int Front() 
    {
        if (L.empty())
            return -1;
        
        return L.front();
    }
    
    int Rear() 
    {
        if (L.empty())
            return -1;
        
        return L.back();
    }
    
    bool isEmpty() 
    {
        return L.empty();
    }
    
    bool isFull() 
    {
        return L.size() >= cap;
    }
private:
    std::deque<int> L;
    int cap;
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */