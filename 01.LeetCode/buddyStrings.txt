https://leetcode.com/problems/buddy-strings/

class Solution 
{
public:
    bool buddyStrings(string& s, const string& goal) 
    {
        if (s.length() != goal.length())
            return false;
        
        std::vector<std::pair<int, int>> diff;
        for (int i = 0; i < s.length(); i++)
        {
            if (s[i] != goal[i])
            {
                diff.push_back({s[i], goal[i]});
            }
        }
        
        if (diff.size() != 0 && diff.size() != 2)
            return false;
        
        if (diff.size() == 2)
        {
            if (diff[0].first == diff[1].second && diff[0].second == diff[1].first)
                return true;
            else
                return false;
        }
        
        int freqA[26];
        int freqB[26];
        std::memset(freqA, 0, 26 * sizeof(int));
        std::memset(freqB, 0, 26 * sizeof(int));
        
        for (const char& c : s)
            freqA[c - 'a']++;
        for (const char& c : goal)
            freqB[c - 'a']++;
        
        for (int i = 0; i < 26; i++)
        {
            if (freqA[i] >= 2 && freqB[i] >= 2)
                return true;
        }
        
        return false;
        
        // return checking(s, 0, s.length() - 1, goal); // time limited exceed solution
    }
private:
    bool checking(std::string& s, int left, int right, const std::string& goal)
    {
        if (left >= right)
            return false;
        
        std::swap(s[left], s[right]);
        if (s == goal)
            return true;
        std::swap(s[left], s[right]);
        
        return checking(s, left + 1, right, goal) || checking(s, left, right - 1, goal);
    }
};