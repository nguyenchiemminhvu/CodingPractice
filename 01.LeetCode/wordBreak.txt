https://leetcode.com/problems/word-break/

class Solution 
{
public:
    bool wordBreak(const string& s, vector<string>& dict) 
    {
        // return checkingBT(s, s.length(), 0, dict);
        return checkingDP(s, s.length(), dict);
    }
private:
    bool checkingBT(const std::string& s, int n, int is, const std::vector<std::string>& dict)
    {
        if (is > n)
            return false;
        
        if (is == n)
            return true;
        
        bool res = false;
        for (int i = 0; i < dict.size(); i++)
        {
            int dict_len = dict[i].length();
            if (is + dict_len > n)
            {
                continue;
            }
            
            std::string temp(s.begin() + is, s.begin() + is + dict_len);
            if (temp != dict[i])
            {
                continue;
            }
            
            res |= checkingBT(s, n, is + dict_len, dict);
        }
        
        return res;
    }
    
    bool checkingDP(const std::string& s, int n, const std::vector<std::string>& dict)
    {
        std::vector<bool> dp(n + 1, false);
        dp[0] = true;
        
        for (int i = 1; i <= n; i++)
        {
            if (!dp[i - 1])
                continue;
            
            for (int j = 0; j < dict.size(); j++)
            {
                int dict_len = dict[j].length();
                if (i + dict_len - 1 > n)
                    continue;
                
                std::string temp(s.begin() + i - 1, s.begin() + i + dict[j].length() - 1);
                if (temp != dict[j])
                {
                    continue;
                }
                
                dp[i + dict_len - 1] = true;
            }
        }
        
        return dp.back();
    }
};