https://leetcode.com/problems/print-zero-even-odd/

class ZeroEvenOdd 
{
private:
    int n;
    
    bool bzero;
    bool bodd;
    pthread_mutex_t mut;
    pthread_cond_t cond_zero;
    pthread_cond_t cond_non_zero;
public:
    ZeroEvenOdd(int n) 
    {
        this->n = n;
        
        bzero = true;
        bodd = true;
        pthread_mutex_init(&mut, NULL);
        pthread_cond_init(&cond_zero, NULL);
        pthread_cond_init(&cond_non_zero, NULL);
    }

    // printNumber(x) outputs "x", where x is an integer.
    void zero(function<void(int)> printNumber) 
    {
        for (int i = 0; i < n; i++)
        {
            pthread_mutex_lock(&mut);
            while (!bzero)
            {
                pthread_cond_wait(&cond_zero, &mut);
            }
            
            printNumber(0);
            
            bzero = false;
            pthread_cond_signal(&cond_non_zero);
            pthread_mutex_unlock(&mut);
        }
    }
    
    void odd(function<void(int)> printNumber) 
    {
        for (int i = 1; i <= n; i += 2)
        {
            pthread_mutex_lock(&mut);
            while (bzero || !bodd)
            {
                pthread_cond_wait(&cond_non_zero, &mut);
            }
            
            printNumber(i);
            
            bzero = true;
            bodd = !bodd;
            pthread_cond_signal(&cond_zero);
            pthread_mutex_unlock(&mut);
        }
    }

    void even(function<void(int)> printNumber) 
    {
        for (int i = 2; i <= n; i += 2)
        {
            pthread_mutex_lock(&mut);
            while (bzero || bodd)
            {
                pthread_cond_wait(&cond_non_zero, &mut);
            }
            
            printNumber(i);
            
            bzero = true;
            bodd = !bodd;
            pthread_cond_signal(&cond_zero);
            pthread_mutex_unlock(&mut);
        }
    }
};