https://leetcode.com/problems/longest-turbulent-subarray/

class Solution
{
public:
    int maxTurbulenceSize(vector<int>& arr)
    {
        int res = 1;

        int count = 1;
        for (int i = 0; i < arr.size() - 1; i++)
        {
            if (i % 2 == 0 && arr[i] > arr[i + 1])
                count++;
            else if (i % 2 == 1 && arr[i] < arr[i + 1])
                count++;
            else
            {
                res = std::max(res, count);
                count = 1;
            }
        }

        res = std::max(res, count);

        count = 1;
        for (int i = 0; i < arr.size() - 1; i++)
        {
            if (i % 2 == 0 && arr[i] < arr[i + 1])
                count++;
            else if (i % 2 == 1 && arr[i] > arr[i + 1])
                count++;
            else
            {
                res = std::max(res, count);
                count = 1;
            }
        }

        res = std::max(res, count);

        return res;
    }
};