struct TrieNode
{
    char val;
    bool completed = false;
    std::unordered_map<char, TrieNode*> nodes;
};

class Solution 
{
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) 
    {
        TrieNode* root = new TrieNode();
        
        for (const std::string& word : words)
        {
            TrieNode* p = root;
            for (int i = 0; i < word.length(); i++)
            {
                if (p->nodes[word[i]] == nullptr)
                {
                    p->nodes[word[i]] = new TrieNode();
                }
                
                p = p->nodes[word[i]];
                p->val = word[i];
                if (i == word.length() - 1)
                {
                    p->completed = true;
                }
            }
        }
        
        std::vector<std::string> res;
        std::string temp;
        std::vector<std::vector<bool>> visited(board.size(), std::vector<bool>(board[0].size(), false));
        for (int i = 0; i < board.size(); i++)
        {
            for (int j = 0; j < board[i].size(); j++)
            {
                DFS(board, i, j, temp, root, visited, res);
            }
        }
        
        return res;
    }
    
private:
    void DFS(const std::vector<std::vector<char>>& board, int r, int c, std::string& temp, TrieNode* root, std::vector<std::vector<bool>>& visited, std::vector<std::string>& res)
    {
        if (!isValid(board, r, c))
            return;
        
        if (!root)
            return;
        
        if (visited[r][c])
            return;
        
        if (!root->nodes[board[r][c]])
            return;
        
        visited[r][c] = true;
        temp += board[r][c];
        root = root->nodes[board[r][c]];
        if (root->completed == true)
        {
            res.push_back(temp);
            root->completed = false;
        }
        DFS(board, r-1, c, temp, root, visited, res);
        DFS(board, r+1, c, temp, root, visited, res);
        DFS(board, r, c-1, temp, root, visited, res);
        DFS(board, r, c+1, temp, root, visited, res);
        temp.pop_back();
        visited[r][c] = false;
    }
    
    bool isValid(const std::vector<std::vector<char>>& board, int r, int c)
    {
        return r >= 0 && r < board.size() && c >= 0 && c < board[0].size();
    }
};