https://leetcode.com/problems/longest-increasing-subsequence/

class Solution 
{
public:
    int lengthOfLIS(vector<int>& nums) 
    {
        // int longest = 0;
        // for (int i = 0; i < nums.size(); i++)
        // {
        //     longest = std::max(longest, longestBacktrack(nums, i));
        // }
        // return longest;
        
        return longestDP(nums);
    }
private:
    int longestBacktrack(const std::vector<int>& nums, int i)
    {
        if (i < 0)
            return 0;
        
        if (i == 0)
            return 1;
        
        int longest = 1;
        for (int j = 0; j < i; j++)
        {
            if (nums[j] < nums[i])
            {
                longest = std::max(longest, 1 + longestBacktrack(nums, j));
            }
        }
        return longest;
    }
    
    int longestDP(const std::vector<int>& nums)
    {
        std::vector<int> dp(nums.size(), 1);
        for (int i = 1; i < nums.size(); i++)
        {
            for (int j = 0; j < i; j++)
            {
                if (nums[j] < nums[i])
                {
                    dp[i] = std::max(dp[i], 1 + dp[j]);
                }
            }
        }
        
        int longest = 0;
        for (const int& n : dp)
            longest = std::max(longest, n);
        return longest;
    }
};