https://leetcode.com/problems/flatten-nested-list-iterator/description

/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator 
{
public:
    NestedIterator(vector<NestedInteger> &nestedList) 
    {
        nums.clear();
        curIdx = 0;
        for (const NestedInteger& item : nestedList)
        {
            buildArray(item);
        }
    }
    
    int next() 
    {
        int val = nums[curIdx];
        curIdx++;
        return val;
    }
    
    bool hasNext() 
    {
        return curIdx < nums.size();
    }
private:
    std::vector<int> nums;
    int curIdx;

    void buildArray(const NestedInteger& item)
    {
        if (item.isInteger())
        {
            nums.push_back(item.getInteger());
        }
        else
        {
            const std::vector<NestedInteger>& subItems = item.getList();
            for (const NestedInteger& subItem : subItems)
            {
                buildArray(subItem);
            }
        }
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */