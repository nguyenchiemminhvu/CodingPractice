/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder)
    {
        std::unordered_map<int, int> idx_map;
        for (int i = 0; i < inorder.size(); i++)
        {
            idx_map[inorder[i]] = i;
        }
        
        return buildTreeHelper(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1, idx_map);
    }
private:
    TreeNode* buildTreeHelper(vector<int>& inorder, int in_start, int in_end, vector<int>& postorder, int post_start, int post_end, unordered_map<int, int>& index_map)
    {
        if (in_start > in_end || post_start > post_end) 
        {
            return nullptr;
        }

        int root_val = postorder[post_end];
        TreeNode* root = new TreeNode(root_val);

        int root_index = index_map[root_val];
        int left_tree_size = root_index - in_start;

        root->left = buildTreeHelper(inorder, in_start, root_index - 1, postorder, post_start, post_start + left_tree_size - 1, index_map);
        root->right = buildTreeHelper(inorder, root_index + 1, in_end, postorder, post_start + left_tree_size, post_end - 1, index_map);

        return root;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder)
    {
        std::unordered_map<int, int> idx_map;
        for (int i = 0; i < inorder.size(); i++)
        {
            idx_map[inorder[i]] = i;
        }
        
        return buildTreeHelper(inorder, 0, inorder.size() - 1, preorder, 0, preorder.size() - 1, idx_map);
    }
private:
    TreeNode* buildTreeHelper(std::vector<int>& inorder, int in_start, int in_end, std::vector<int>& preorder, int pre_start, int pre_end, std::unordered_map<int, int>& idx_map)
    {
        if (in_start > in_end || pre_start > pre_end)
        {
            return nullptr;
        }
        
        int val = preorder[pre_start];
        int idx = idx_map[val];
        int left_tree_size = idx - in_start;
        
        TreeNode* n = new TreeNode(val);
        n->left = buildTreeHelper(inorder, in_start, idx - 1, preorder, pre_start + 1, pre_start + left_tree_size, idx_map);
        n->right = buildTreeHelper(inorder, idx + 1, in_end, preorder, pre_start + left_tree_size + 1, pre_end, idx_map);
        return n;
    }
};