https://leetcode.com/problems/binary-tree-paths/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    vector<string> binaryTreePaths(TreeNode* root) 
    {
        std::vector<std::vector<TreeNode*>> vv;
        std::queue<std::vector<TreeNode*>> Q;
        Q.push({root});
        while (!Q.empty())
        {
            std::vector<TreeNode*> cur = Q.front();
            Q.pop();
            
            TreeNode* lastNode = cur.back();
            if (!lastNode->left && !lastNode->right)
            {
                vv.push_back(cur);
            }
            else
            {
                if (lastNode->left)
                {
                    cur.push_back(lastNode->left);
                    Q.push(cur);
                }
                if (lastNode->right)
                {
                    if (lastNode->left)
                        cur.pop_back();
                    
                    cur.push_back(lastNode->right);
                    Q.push(cur);
                }
            }
        }
        
        std::vector<std::string> res;
        for (const std::vector<TreeNode*>& v : vv)
        {
            std::string temp;
            for (const TreeNode* n : v)
            {
                temp += std::to_string(n->val);
                temp += "->";
            }
            temp.erase(temp.end() - 2, temp.end());
            res.push_back(temp);
        }
        
        return res;
    }
};