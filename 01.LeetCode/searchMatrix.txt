https://leetcode.com/problems/search-a-2d-matrix-ii/

class Solution 
{
public:
    bool searchMatrix(const vector<vector<int>>& matrix, int target) 
    {
//         int ir = 0;
//         while (ir < matrix.size())
//         {
//             const std::vector<int>& row = matrix[ir];
//             if (row[0] > target)
//                 break;
            
//             if (row[0] <= target && row.back() >= target)
//             {
//                 if (std::binary_search(row.begin(), row.end(), target))
//                     return true;
//             }
//             ir++;
//         }
        
//         return false;
        
        return searchUtil(matrix, 0, matrix.size() - 1, target);
    }
private:
    bool searchUtil(const vector<vector<int>>& matrix, int low, int high, int target)
    {
        if (low > high)
            return false;
        
        int med = low + (high - low) / 2;
        const std::vector<int>& row = matrix[med];
        if (row[0] <= target && row.back() >= target)
        {
            if (std::binary_search(row.begin(), row.end(), target))
                return true;
            
            return searchUtil(matrix, low, med - 1, target)
                || searchUtil(matrix, med + 1, high, target);
        }
        else
        {
            if (row[0] > target)
            {
                return searchUtil(matrix, low, med - 1, target);
            }
            else
            {
                return searchUtil(matrix, med + 1, high, target);
            }
        }
        
        return false;
    }
};