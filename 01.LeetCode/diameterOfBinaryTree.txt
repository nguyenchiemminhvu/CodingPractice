https://leetcode.com/problems/diameter-of-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    int diameterOfBinaryTree(TreeNode* root) 
    {
        return diameterUtil(root);
    }
private:
    int diameterUtil(TreeNode* root)
    {
        if (!root)
            return 0;
        
        int hLeft = height(root->left);
        int hRight = height(root->right);
        
        int dLeft = diameterUtil(root->left);
        int dRight = diameterUtil(root->right);
        
        return std::max(hLeft + hRight, std::max(dLeft, dRight));
    }
    
    int height(TreeNode* root)
    {
        if (!root)
            return 0;
        return 1 + std::max(height(root->left), height(root->right));
    }
};